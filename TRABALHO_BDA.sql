

CREATE SCHEMA IF NOT EXISTS `ISABELA` DEFAULT CHARACTER SET utf8 ;
USE `ISABELA` ;

-- Criação da ISABELA LAVACOES

CREATE TABLE IF NOT EXISTS `ISABELA`.`LAVACOES` (
  `COD_LAV` INT NOT NULL AUTO_INCREMENT,
  `NOM_LAV` VARCHAR(45) NOT NULL,
  `END_LAV` VARCHAR(80) NULL,
  PRIMARY KEY (`COD_LAV`))
ENGINE = InnoDB;

 -- TABELA DE FUNCINARIOS
 
CREATE TABLE IF NOT EXISTS `ISABELA`.`FUNCIONARIOS` (
  `COD_FUNC` INT NOT NULL AUTO_INCREMENT,
  `NOME_FUNC` VARCHAR(45) NOT NULL,
  `END_FUNC` VARCHAR(80) NULL,
  `COD_LAV_FUNC` INT NOT NULL,
  PRIMARY KEY (`COD_FUNC`),
  INDEX `fk_FUNCIONARIOS_LAVACOES_idx` (`COD_LAV_FUNC` ASC) VISIBLE,
  CONSTRAINT `fk_FUNCIONARIOS_LAVACOES`
    FOREIGN KEY (`COD_LAV_FUNC`)
    REFERENCES `ISABELA`.`LAVACOES` (`COD_LAV`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- TABELA DE SERVICOS

CREATE TABLE IF NOT EXISTS `ISABELA`.`SERVICOS` (
  `COD_SERV` INT NOT NULL AUTO_INCREMENT,
  `NOM_SERV` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`COD_SERV`))
ENGINE = InnoDB;

-- TABELA DE PRODUTOS

CREATE TABLE IF NOT EXISTS `ISABELA`.`PRODUTOS` (
 `COD_PRO` INT NOT NULL AUTO_INCREMENT,
 `NOM_PRO` VARCHAR(45) NULL,
 `QTD_PRO` INT NULL,
 `LAVACOES_COD_LAV` INT NOT NULL,
 PRIMARY KEY (`COD_PRO`),
 INDEX `fk_PRODUTOS_LAVACOES1_idx` (`LAVACOES_COD_LAV` ASC) VISIBLE,
 CONSTRAINT `fk_PRODUTOS_LAVACOES1`
   FOREIGN KEY (`LAVACOES_COD_LAV`)
   REFERENCES `ISABELA`.`LAVACOES` (`COD_LAV`)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- CRIACAO DA TABELA DE RELACIONAMENTO ENTRE SERVICOS E PRODUTOS

CREATE TABLE IF NOT EXISTS `ISABELA`.`SERVICOS_PRODUTOS` (
  `SERVICOS_COD_SERV` INT NOT NULL,
  `PRODUTOS_COD_PRO` INT NOT NULL,
  `QTD_SERV_PRO` INT NOT NULL,
  PRIMARY KEY (`SERVICOS_COD_SERV`, `PRODUTOS_COD_PRO`),
  INDEX `fk_SERVICOS_has_PRODUTOS_PRODUTOS1_idx` (`PRODUTOS_COD_PRO` ASC) VISIBLE,
  INDEX `fk_SERVICOS_has_PRODUTOS_SERVICOS1_idx` (`SERVICOS_COD_SERV` ASC) VISIBLE,
  CONSTRAINT `fk_SERVICOS_has_PRODUTOS_SERVICOS1`
    FOREIGN KEY (`SERVICOS_COD_SERV`)
    REFERENCES `ISABELA`.`SERVICOS` (`COD_SERV`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SERVICOS_has_PRODUTOS_PRODUTOS1`
    FOREIGN KEY (`PRODUTOS_COD_PRO`)
    REFERENCES `ISABELA`.`PRODUTOS` (`COD_PRO`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- TABELA DE VENDAS

CREATE TABLE IF NOT EXISTS `ISABELA`.`VENDAS` (
  `COD_VEND` INT NOT NULL AUTO_INCREMENT,
  `LAVACOES_COD_LAV` INT NOT NULL,
  `FUNCIONARIOS_COD_FUNC` INT NOT NULL,
  `SERVICOS_COD_SERV` INT NOT NULL,
  PRIMARY KEY (`COD_VEND`),
  INDEX `fk_VENDAS_LAVACOES1_idx` (`LAVACOES_COD_LAV` ASC) VISIBLE,
  INDEX `fk_VENDAS_FUNCIONARIOS1_idx` (`FUNCIONARIOS_COD_FUNC` ASC) VISIBLE,
  INDEX `fk_VENDAS_SERVICOS1_idx` (`SERVICOS_COD_SERV` ASC) VISIBLE,
  CONSTRAINT `fk_VENDAS_LAVACOES1`
    FOREIGN KEY (`LAVACOES_COD_LAV`)
    REFERENCES `ISABELA`.`LAVACOES` (`COD_LAV`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VENDAS_FUNCIONARIOS1`
    FOREIGN KEY (`FUNCIONARIOS_COD_FUNC`)
    REFERENCES `ISABELA`.`FUNCIONARIOS` (`COD_FUNC`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VENDAS_SERVICOS1`
    FOREIGN KEY (`SERVICOS_COD_SERV`)
    REFERENCES `ISABELA`.`SERVICOS` (`COD_SERV`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `ISABELA` ;

-- CRIANDO UMA TABELA DE ESTOQUE POR CAUSA DA VIEW
CREATE TABLE IF NOT EXISTS `ISABELA`.`ESTOQUE_LAVACAO` (`COD_PRO` INT);

-- CRIANDO UMA VIEW QUE MOSTRA A QUANTIDADE DE PRODUTOS
DROP TABLE IF EXISTS `ISABELA`.`ESTOQUE_LAVACAO`;
USE `ISABELA`;
CREATE  OR REPLACE VIEW ESTOQUE_LAVACAO AS
SELECT COD_PRO, NOM_PRO, QTD_PRO FROM PRODUTOS
-- AQUI VOCE DETERMINA QUAL LOJA VOCE QUER VER O ESTOQUE.
WHERE LAVACOES_COD_LAV = 1;
USE `ISABELA`;

SELECT * FROM ESTOQUE_LAVACAO

DELIMITER $$
USE `ISABELA`$$
-- CRIA UMA TRIGGER ONDE DIMINUI A QUANTIDADE DE PRODUTOS CONFORME O QUE FOI GASTO
CREATE DEFINER = CURRENT_USER TRIGGER `ISABELA`.`VENDAS_AFTER_INSERT` AFTER INSERT ON `VENDAS` FOR EACH ROW
BEGIN
SET @GASTO = (SELECT QTD_SERV_PRO FROM SERVICOS_PRODUTOS);
UPDATE PRODUTOS SET QTD_PRO = QTD_PRO - @GASTOS;
END$$
DELIMITER ;

-- PROCEDURE 1

DELIMITER $$
CREATE PROCEDURE CRUD_LAVACOES(
IN  COMP INT,
-- O INT SE REFERE AO COD DA TABELA QUE É TIPO AI
IND INT,
NOM_LAV_PROC VARCHAR(45),
END_LAV_PROC VARCHAR(80)
)
begin

	IF( COMP = 1)
		THEN
		insert into LAVACOES(NOM_LAV,END_LAV)
			values(NOM_LAV_PROC, END_LAV_PROC);
	END IF;
	IF( COMP = 2)
		THEN
		UPDATE LAVACOES SET NOM_LAV = NOM_LAV_PROC,
		END_LAV = END_LAV_PROC
		WHERE COD_LAV = IND;
	END IF;
	IF( COMP = 3)
		THEN
		DELETE FROM LAVACOES
		WHERE COD_LAV = IND;
	END IF;
end $$

-- PREOCEDURE 2

DELIMITER $$
CREATE PROCEDURE CRUD_FUNCIONARIOS(
IN  COMP INT,
-- O INT SE REFERE AO COD DA TABELA QUE É TIPO AI
IND INT,
NOME_FUNC_PROC VARCHAR(45),
END_FUNC_PROC VARCHAR(80),
COD_LAV_FUNC_PROC INT
)
begin

	IF( COMP = 1)
		THEN
		INSERT INTO FUNCIONARIOS(NOME_FUNC,END_FUNC,COD_LAV_FUNC)
			values(NOME_FUNC_PROC, END_FUNC_PROC, COD_LAV_FUNC_PROC);
	END IF;
	IF( COMP = 2)
		THEN
		UPDATE FUNCIONARIOS SET NOME_FUNC = NOME_FUNC_PROC,
		END_FUNC = END_FUNC_PROC,
        COD_LAV_FUNC = COD_LAV_FUNC_PROC
		WHERE COD_FUNC = IND;
	END IF;
	IF( COMP = 3)
		THEN
		DELETE FROM FUNCIONARIOS
		WHERE COD_FUNC = IND;
	END IF;
end $$

-- PROCEDURE 3

DELIMITER $$
CREATE PROCEDURE CRUD_SERVICOS(
IN  COMP INT,
-- O INT SE REFERE AO COD DA TABELA QUE É TIPO AI
IND INT,
NOM_SERV_PROC VARCHAR(45),
)
begin

	IF( COMP = 1)
		THEN
		INSERT INTO SERVICOS(NOM_SERV)
			VALUES(NOM_SERV_PROC);
	END IF;
	IF( COMP = 2)
		THEN
		UPDATE SERVICOS SET NOM_SERV = NOM_SERV_PROC
		WHERE COD_SERV = IND;
	END IF;
	IF( COMP = 3)
		THEN
		DELETE FROM SERVICOS
		WHERE COD_SERV = IND;
	END IF;
end $$

-- PROCEDURE 4

DELIMITER $$
CREATE PROCEDURE CRUD_PRODUTOS(
IN  COMP INT,
-- O INT SE REFERE AO COD DA TABELA QUE É TIPO AI
IND INT,
NOM_PRO_PROC VARCHAR(45),
QTD_PRO_PROC INT,
LAVACOES_COD_LAV_PROC INT
)
begin

	IF( COMP = 1)
		THEN
		INSERT INTO PRODUTOS(NOM_PRO,QTD_PRO,LAVACOES_COD_LAV)
			VALUES(NOM_PRO_PROC,QTD_PRO_PROC,LAVACOES_COD_LAV_PROC);
	END IF;
	IF( COMP = 2)
		THEN
		UPDATE PRODUTOS SET NOM_PRO = NOM_PRO_PROC,
		QTD_PRO = QTD_PRO_PROC,
        LAVACOES_COD_LAV = LAVACOES_COD_LAV_PROC
		WHERE COD_PRO = IND;
	END IF;
	IF( COMP = 3)
		THEN
		DELETE FROM PRODUTOS
		WHERE COD_PRO = IND;
	END IF;
end $$

-- PRECEDURE 6

DELIMITER $$
CREATE PROCEDURE CRUD_REL_SERV_PROD(
IN  COMP INT,
SERVICOS_COD_SERV_PROC INT,
PRODUTOS_COD_PRO_PROC INT,
QTD_SER_PRO_PROC INT
)
begin

	IF( COMP = 1)
		THEN
		INSERT INTO SERVICOS_PRODUTOS(SERVICOS_COD_SERV,PRODUTOS_COD_PRO,QTD_SER_PRO)
			VALUES(SERVICOS_COD_SERV_PROC,PRODUTOS_COD_PRO_PROC,QTD_SER_PRO_PROC);
	END IF;
	IF( COMP = 2)
		THEN
		UPDATE SERVICOS_PRODUTOS SET SERVICOS_COD_SERV = SERVICOS_COD_SERV_PROC,
		PRODUTOS_COD_PRO = PRODUTOS_COD_PRO_PROC,
        QTD_SER_PRO = QTD_SER_PRO_PROC;
	END IF;
	IF( COMP = 3)
		THEN
		DELETE FROM SERVICOS_PRODUTOS
		WHERE SERVICOS_COD_SERV = SERVICOS_COD_SERV_PROC OR PRODUTOS_COD_PRO = PRODUTOS_COD_PRO_PROC;
	END IF;
end $$

-- PRECEDURE 6

DELIMITER $$
CREATE PROCEDURE CRUD_VENDAS(
IN  COMP INT,
-- O INT SE REFERE AO COD DA TABELA QUE É TIPO AI
IND INT,
LAVACOES_COD_LAV INT,
FUNCIONARIOS_COD_FUNC INT,
SERVICOS_COD_SERV INT
)
begin

	IF( COMP = 1)
		THEN
		INSERT INTO VENDAS(LAVACOES_COD_LAV,FUNCIONARIOS_COD_FUNC,SERVICOS_COD_SERV)
			VALUES(LAVACOES_COD_LAV_PROC,FUNCIONARIOS_COD_FUNCO_PROC,SERVICOS_COD_SERV_PROC);
	END IF;
	IF( COMP = 2)
		THEN
		UPDATE VENDAS SET LAVACOES_COD_LAV = LAVACOES_COD_LAV_PROC,
		FUNCIONARIOS_COD_FUNC = FUNCIONARIOS_COD_FUNCO_PROC,
        SERVICOS_COD_SERV = SERVICOS_COD_SERV_PROC
		WHERE COD_VEND = IND;
	END IF;
	IF( COMP = 3)
		THEN
		DELETE FROM VENDAS
		WHERE COD_VEND = IND;
	END IF;
end $$


CALL CRUD_LAVACOES(1, 1, 'Cleiton', 'lugar nenhum');
CALL CRUD_LAVACOES(2, 1, 'rodrigo', 'joinva');
CALL CRUD_LAVACOES(3, 1, '', '');

-- FUNCAO QUE VERIFICA QUANTAS VENDAS FORAM FEITAS PRO LAVACAO
CREATE FUNCTION QUANTAS_VENDAS(LAVACAO INT)
RETURNS INT
RETURN (SELECT COUNT(COD_VEND) FROM VENDAS where LAVACOES_COD_LAV = LAVACAO);

SELECT QUANTAS_VENDAS (1) AS RELATORIO_DE_VENDAS;